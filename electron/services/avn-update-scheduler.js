const cron = require('node-cron');
const Store = require('electron-store');

let checkUpdatesTask = null;
const store = new Store();

/**
 * D√©marre le scheduler de v√©rification des mises √† jour AVN
 * @param {Function} checkAvnUpdatesHandler - Handler de v√©rification des MAJ
 */
function startScheduler(checkAvnUpdatesHandler) {
  try {
    const enabled = store.get('avn_auto_check_enabled', false);
    const intervalHours = store.get('avn_auto_check_interval', 6);
    
    if (!enabled) {
      console.log('‚ö†Ô∏è V√©rification auto MAJ AVN d√©sactiv√©e');
      return;
    }
    
    // Cr√©er un cron job bas√© sur l'intervalle (en heures)
    const cronExpression = `0 */${intervalHours} * * *`; // Toutes les X heures
    
    checkUpdatesTask = cron.schedule(cronExpression, async () => {
      console.log(`üîç V√©rification automatique des MAJ AVN (intervalle: ${intervalHours}h)...`);
      
      try {
        const result = await checkAvnUpdatesHandler();
        
        if (result.updated > 0) {
          console.log(`‚úÖ ${result.updated} mise(s) √† jour AVN d√©tect√©e(s)`);
          
          // Notification desktop (optionnel)
          // TODO: Impl√©menter notifications desktop si souhait√©
        } else {
          console.log('‚úÖ Aucune mise √† jour AVN d√©tect√©e');
        }
      } catch (error) {
        console.error('‚ùå Erreur v√©rification auto MAJ AVN:', error);
      }
    });
    
    console.log(`‚úÖ Scheduler MAJ AVN d√©marr√© (intervalle: ${intervalHours}h)`);
    
  } catch (error) {
    console.error('‚ùå Erreur d√©marrage scheduler MAJ AVN:', error);
  }
}

/**
 * Arr√™te le scheduler de v√©rification
 */
function stopScheduler() {
  if (checkUpdatesTask) {
    checkUpdatesTask.stop();
    checkUpdatesTask = null;
    console.log('üõë Scheduler MAJ AVN arr√™t√©');
  }
}

/**
 * V√©rifie les MAJ au d√©marrage si activ√©
 * @param {Function} checkAvnUpdatesHandler 
 */
async function checkOnStartup(checkAvnUpdatesHandler) {
  try {
    const enabled = store.get('avn_auto_check_enabled', false);
    const checkOnStart = store.get('avn_check_on_startup', true);
    
    if (!enabled || !checkOnStart) {
      return;
    }
    
    console.log('üîç V√©rification des MAJ AVN au d√©marrage...');
    
    const result = await checkAvnUpdatesHandler();
    
    if (result.updated > 0) {
      console.log(`‚úÖ ${result.updated} mise(s) √† jour AVN d√©tect√©e(s) au d√©marrage`);
    } else {
      console.log('‚úÖ Aucune mise √† jour AVN au d√©marrage');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur v√©rification MAJ AVN au d√©marrage:', error);
  }
}

module.exports = {
  startScheduler,
  stopScheduler,
  checkOnStartup
};

